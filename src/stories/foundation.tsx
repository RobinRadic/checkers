import 'reflect-metadata';
import * as React from 'react';
import { storiesOf } from '@storybook/react';
import { Viewport } from '@storybook/addon-viewport';
import { withInfo } from '@storybook/addon-info';
import { selectV2, withKnobs } from '@storybook/addon-knobs';
import '../../src/styles/stylesheet.scss'
addStoriesFoundationXYGrid();

addStoriesFoundationFlexboxUtilities();

function addStoriesFoundationXYGrid() {
    storiesOf('Foundation/XY Grid', module)
        .add('Basics', withInfo(`

> **Use Viewport to preview**

The structure of XY grid uses .grid-x, .grid-y, and .cell as its base. Without defining a gutter type the cells will simply split up the space without any gutters.

-------------

The XY grid works very similarly to the standard float grid, but includes a number of useful features only possible with Flexbox,
 like horizontal and vertical alignment, automatic sizing and a full vertical grid.
 
 
XY grid is the default Foundation grid. 
It is present by default in foundation.css of CDN link or package managers. 
In Sass, it will be generated by default by @include foundation-everything (unless $flex or $xy-grid are set to false).
If $xy-grid is set to false, the flex grid is used.
If $flex is set to false, the float grid is used instead.

You can manually generate the XY Grid with: 
~~~scss
@import 'foundation';

@include foundation-xy-grid-classes(
  /* options
  $base-grid: true,
  $margin-grid: true,
  $padding-grid: true,
  $block-grid: true,
  $collapse: true,
  $offset: true,
  $vertical-grid: true,
  $frame-grid: true
  */
);
~~~
 
 
 
`)(() => {

            return (
                <div>
                    <div className="grid-x bg-blue-grey-2">
                        <div className="cell bg-blue-grey-4">full width cell</div>
                        <div className="cell bg-blue-grey-5">full width cell</div>
                    </div>
                    <div className="grid-x bg-blue-grey-3">
                        <div className="cell small-6 bg-blue-grey-4">6 cells</div>
                        <div className="cell small-6 bg-blue-grey-5">6 cells</div>
                    </div>
                    <div className="grid-x bg-blue-grey-2">
                        <div className="cell medium-6 large-4 bg-blue-grey-4">12/6/4 cells</div>
                        <div className="cell medium-6 large-8 bg-blue-grey-5">12/6/8 cells</div>
                    </div>
                </div>
            )
        }))

        .add('Gutters', withInfo(`
The defining feature of the XY grid is the ability to use margin AND padding grids in harmony. To define a grid type, simply set .grid-margin-x or .grid-padding-x on the grid. 
`)(() => (
            <div>
                <div className="grid-x grid-margin-x bg-blue-grey-2">
                    <div className="cell medium-6 bg-blue-grey-4">full width cell</div>
                    <div className="cell medium-6 bg-blue-grey-5">full width cell</div>
                </div>
                <div className="grid-x grid-padding-x bg-blue-grey-2">
                    <div className="cell medium-6 large-4 bg-blue-grey-4">12/6/4 cells</div>
                    <div className="cell medium-6 large-8 bg-blue-grey-5">12/6/8 cells</div>
                </div>
            </div>
        )))
        .addDecorator(withKnobs)
        .add('Grid Container', withInfo(`
The grid defaults to the full width of the available space.
 
- To contain it use the grid-container class. 
  The container will be centered and have a max-width equal to your $grid-container setting (1200px by default)
  along with padding on the left/right equal to half your $grid-container-padding setting. 

- To stretch the content to the full width of the available space, simply add the class fluid to your grid-container.

> **Use the KNOBS tab to switch**

`)(() => {
            return (
                <div className="bg-blue-grey-8">
                    <div className={'grid-container ' + (selectV2('Width Control', { '': '', fluid: 'fluid', full: 'full' }, '')) + ' bg-red-5'}>
                        <div className="grid-x grid-margin-x bg-blue-5">
                            <div className="cell small-4 bg-grey-5">cell</div>
                            <div className="cell small-4 bg-grey-3">cell</div>
                            <div className="cell small-4 bg-grey-5">cell</div>
                        </div>
                    </div>
                </div>
            )
        }))
        .add('Auto Sizing', withInfo(`
If the class .auto or .[size]-auto is added to the cell, it will take up the remaining space.

`)(() => {
            return (
                <div className="bg-blue-grey-8">
                    <div className="grid-x grid-margin-x bg-blue-grey-4">
                        <div className="cell small-4 bg-grey-4">4 cells</div>
                        <div className="cell auto bg-grey-8">Whatever's left!</div>
                    </div>
                    <p>Multiple expanding cells will share the leftover space equally</p>
                    <div className="grid-x grid-margin-x bg-blue-grey-2">
                        <div className="cell small-4 bg-grey-8">4 cells</div>
                        <div className="cell auto bg-grey-4">Whatever's left!</div>
                        <div className="cell auto bg-grey-8">Whatever's left!</div>
                    </div>
                    <p>A cell can also be made to shrink, by adding the .shrink or .[size]-shrink class. This means it will only take up the space its contents need.</p>
                    <div className="grid-x grid-margin-x bg-blue-grey-4">
                        <div className="cell shrink bg-grey-4">Shrink!</div>
                        <div className="cell auto bg-grey-8">Expand!</div>
                    </div>
                </div>
            )
        }))
        .add('Responsive Adjustments', withInfo(`
To switch back to the auto behavior from a percentage or shrink behavior, use the classes .[size]-auto or .[size]-shrink. In the below example, the cells stack on small screens, and become even-width on large screens

`)(() => {
            return (
                <div className="grid-x bg-blue-grey-8">
                    <div className="cell large-auto bg-grey-2">One</div>
                    <div className="cell large-auto bg-grey-3">Two</div>
                    <div className="cell large-auto bg-grey-4">Three</div>
                    <div className="cell large-auto bg-grey-5">Four</div>
                    <div className="cell large-auto bg-grey-6">Five</div>
                    <div className="cell large-auto bg-grey-7">Six</div>
                </div>
            )
        }))
        .add('Collapse Cells', withInfo(`
The .[size]-[gutter-type]-collapse class lets you remove cell gutters.

There are times when you won't want each media query to be collapsed. In this case, use the media query size you want and collapse and add that to your grid element. Example shows gutters at small and no gutters on medium and up.`)(() => {
            return (
                <div className="grid-x grid-margin-x medium-margin-collapse">
                    <div className="cell small-6">
                        Gutters at small no gutters at medium.
                    </div>
                    <div className="cell small-6">
                        Gutters at small no gutters at medium.
                    </div>
                </div>
            )
        }))
        .add('Offsets', withInfo(`
Offsets work by applying margin-left (or margin-top for a vertical grid) to a grid
`)(() => {
            return (
                <div className="grid-x grid-margin-x bg-blue-grey-4">
                    <div className="cell small-4 large-offset-2 bg-blue-grey-6">Offset 2 on large</div>
                    <div className="cell small-4 bg-blue-grey-6">4 cells</div>
                </div>
            )
        }))
        .add('Block Grids', withInfo(`
To define cell widths within a direction-level, instead of the individual cell level, add the class .[size]-up-[n] to a grid-x or grid-y, where [n] is the number of cells to display per direction, and [size] is the breakpoint at which to apply the effect.

**This example uses padding grid but this can be used with margin grid too.**
`)(() => {
            return (
                <div className="grid-x grid-padding-x small-up-2 medium-up-4 large-up-6 bg-blue-grey-2">
                    <div className="cell bg-grey-2">cell</div>
                    <div className="cell bg-grey-4">cell</div>
                    <div className="cell bg-grey-6">cell</div>
                    <div className="cell bg-grey-2">cell</div>
                    <div className="cell bg-grey-4">cell</div>
                    <div className="cell bg-grey-6">cell</div>
                </div>
            )
        }))
        .add('Vertical Grids', withInfo(`
The XY grid also supports vertical grids. Simply apply .grid-y instead of .grid-x. The internal cells will shift automatically to provide spacing vertically rather than horizontally.

You can also apply margin or padding with .grid-margin-y and .grid-padding-y to apply spacing to the top and bottom of cells.

**Please note for vertical grids to work, the grid needs a height. You can also use grid frame to create a 100 vertical height grid (or 100% height if nested).**

`)(() => {
            return (
                <div className="grid-y" styleName="height: 500px;">
                    <div className="cell small-6 medium-8 large-2">
                        6/8/2
                    </div>
                    <div className="cell small-6 medium-4 large-10">
                        6/4/10
                    </div>
                </div>
            )
        }))
        .add('Grid Frame', withInfo(`
The XY grid incorporates the grid frame from Foundation for Apps plus many other useful features. To start, add .grid-frame to the grid. This sets the grid to be 100vh (the full height of the browser window).

**Please note to use .grid-margin-x or .grid-margin-y with .grid-frame you need to hide the overflow on the body like so: body {overflow: hidden;}.**
`)(() => {
            return (
                <div className="grid-y medium-grid-frame bg-blue-grey-2" style={{ maxHeight: '400px' }}>
                    <div className="cell shrink header medium-cell-block-container bg-blue-grey-4">
                        <h1>Grid Frame Header</h1>
                        <div className="grid-x grid-padding-x bg-blue-grey-6">
                            <div className="cell medium-4 bg-blue-grey-4">
                                A medium 4 cell
                            </div>
                            <div className="cell medium-4 medium-cell-block bg-blue-grey-3">
                                <p style={{ width: '80vw' }}>A medium 4 cell block... on medium this content should overflow and let you horizontally scroll across... one might use this for an array of options</p>
                            </div>
                            <div className="cell medium-4 bg-blue-grey-4">
                                A medium 4 cell
                            </div>
                        </div>
                    </div>
                    <div className="cell medium-auto medium-cell-block-container bg-blue-grey-4">
                        <div className="grid-x grid-padding-x bg-blue-2">
                            <div className="cell medium-4 medium-cell-block-y bg-blue-6">
                                <h2>Independent scrolling sidebar</h2>
                                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer lacus odio, accumsan id ullamcorper eget, varius nec erat. Nulla facilisi. Donec dui felis, euismod nec finibus vitae, dapibus quis arcu. Maecenas tempor et ipsum quis venenatis. Ut posuere sed augue sit amet efficitur. Sed imperdiet, justo id tempus rhoncus, est est viverra turpis, non vulputate magna lectus et nisl. Pellentesque ultrices porttitor vehicula. Ut aliquet efficitur ligula, a consectetur felis. Proin tristique ut augue nec luctus. Curabitur a sapien pretium, auctor elit a, efficitur erat. Donec tincidunt dui vel velit bibendum euismod. Cras vitae nibh dui. Aliquam erat volutpat. Etiam sit amet arcu a erat efficitur facilisis. Ut viverra dapibus turpis, et ornare justo. Integer in dui cursus, dignissim tortor a, hendrerit risus.</p>

                                <p>Suspendisse pulvinar, massa iaculis feugiat lobortis, dolor sapien vestibulum nulla, vel cursus tellus leo in lorem. Aliquam eu placerat urna. Suspendisse sed viverra orci, ut mattis neque. Fusce non ultrices nisi. In sagittis varius mollis. Quisque dolor quam, consectetur eu lacinia ac, ullamcorper vel arcu. Nullam mattis imperdiet nulla sed ornare. Praesent tristique, est id eleifend vestibulum, neque nibh condimentum ex, nec lobortis purus justo a libero. Phasellus id ex ac nunc hendrerit hendrerit. Nullam urna ipsum, rutrum at fringilla vel, venenatis non purus. Maecenas egestas ex vitae venenatis molestie. Ut et odio egestas, accumsan neque et, viverra nisl. Sed faucibus nec nulla sed imperdiet. Fusce quis sem ac urna semper tempor a id elit. Nulla fringilla vitae sapien a vehicula.</p>

                            </div>
                            <div className="cell medium-8 medium-cell-block-y bg-blue-4">
                                <h2>Independent scrolling body</h2>
                                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer lacus odio, accumsan id ullamcorper eget, varius nec erat. Nulla facilisi. Donec dui felis, euismod nec finibus vitae, dapibus quis arcu. Maecenas tempor et ipsum quis venenatis. Ut posuere sed augue sit amet efficitur. Sed imperdiet, justo id tempus rhoncus, est est viverra turpis, non vulputate magna lectus et nisl. Pellentesque ultrices porttitor vehicula. Ut aliquet efficitur ligula, a consectetur felis. Proin tristique ut augue nec luctus. Curabitur a sapien pretium, auctor elit a, efficitur erat. Donec tincidunt dui vel velit bibendum euismod. Cras vitae nibh dui. Aliquam erat volutpat. Etiam sit amet arcu a erat efficitur facilisis. Ut viverra dapibus turpis, et ornare justo. Integer in dui cursus, dignissim tortor a, hendrerit risus.</p>
                                <p>Suspendisse pulvinar, massa iaculis feugiat lobortis, dolor sapien vestibulum nulla, vel cursus tellus leo in lorem. Aliquam eu placerat urna. Suspendisse sed viverra orci, ut mattis neque. Fusce non ultrices nisi. In sagittis varius mollis. Quisque dolor quam, consectetur eu lacinia ac, ullamcorper vel arcu. Nullam mattis imperdiet nulla sed ornare. Praesent tristique, est id eleifend vestibulum, neque nibh condimentum ex, nec lobortis purus justo a libero. Phasellus id ex ac nunc hendrerit hendrerit. Nullam urna ipsum, rutrum at fringilla vel, venenatis non purus. Maecenas egestas ex vitae venenatis molestie. Ut et odio egestas, accumsan neque et, viverra nisl. Sed faucibus nec nulla sed imperdiet. Fusce quis sem ac urna semper tempor a id elit. Nulla fringilla vitae sapien a vehicula.</p>
                                <p>Nullam vestibulum lorem nec lectus egestas, nec ullamcorper diam maximus. Maecenas condimentum, nibh at blandit semper, ex erat tempus magna, id maximus neque velit accumsan nibh. Aenean dignissim lorem eu nisl laoreet vestibulum. Vivamus efficitur et augue vitae tincidunt. Etiam et magna felis. Integer mattis, nisi aliquet scelerisque blandit, ex mi sodales ante, eget accumsan quam magna et ligula. Curabitur id tristique leo. Proin rutrum mi vitae enim rhoncus, at cursus neque eleifend. Integer ultrices volutpat tellus ac porta. Fusce sollicitudin venenatis lacinia. Fusce ante lorem, gravida semper varius non, pharetra non erat. Sed dapibus arcu turpis, ac sollicitudin nibh lacinia vel. Nullam at enim porta, luctus metus sit amet, rutrum odio. Cras tempor enim vel pellentesque sollicitudin. Maecenas ullamcorper, sem non accumsan volutpat, neque tortor pulvinar orci, ut ultrices ligula lorem ut risus.</p>
                                <p>Aliquam facilisis, nibh eget posuere suscipit, arcu sapien iaculis odio, in molestie dolor lectus vitae sem. Cras id nunc mollis mi rutrum dapibus. Quisque rutrum a augue at scelerisque. Praesent faucibus ac enim vitae gravida. Sed et sodales elit. Duis magna lectus, interdum sit amet metus a, sagittis varius magna. Proin nibh lectus, egestas a luctus ut, dapibus et enim. Curabitur fringilla ipsum vitae nunc imperdiet consectetur eget non neque. Suspendisse ultricies odio quis lorem vulputate, ac vulputate turpis feugiat. Maecenas posuere rhoncus orci, in ornare velit suscipit tempor. Curabitur pretium nisl id lorem placerat consequat. In quis quam eros. Nam mattis elit eu quam sagittis, in varius erat tempor.</p>
                                <p>Fusce felis magna, pellentesque eget mollis a, rutrum id eros. Curabitur auctor varius arcu a consequat. Phasellus quis pulvinar enim, eu ultricies justo. Pellentesque risus libero, dapibus at erat ultricies, gravida varius erat. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nulla tempus, justo ut laoreet mollis, nunc tellus convallis urna, vel pretium dui velit eget ligula. Aliquam semper sed nulla a molestie. Maecenas at egestas massa, vitae aliquam mi. Fusce nec sem egestas, pretium lacus non, tincidunt sapien. Sed tristique odio at ultricies vulputate. Integer et convallis augue, eu aliquam enim. Mauris ut faucibus diam. Donec vulputate nunc sed congue accumsan. Etiam lobortis nisi quis lacinia pharetra.</p>
                            </div>
                        </div>
                    </div>
                    <div className="cell shrink footer">
                        <h3>Here's my footer</h3>
                    </div>
                </div>
            )
        }))
        .add('Building Semantically', withInfo(`
XY grid CSS is generated with a powerful set of Sass mixins, which you can use in your own code to build a semantic grid.

### Grid Container
Use the xy-grid-container() mixin to create a grid container. This contains the grid to the width specified in $grid-container.

~~~scss
.container {
  @include xy-grid-container;
}
~~~

### Grids
Use the xy-grid() mixin to create a grid.

~~~scss
.my-grid {
  @include xy-grid;
}
~~~

### Gutters
Use the xy-gutters() mixin to add gutters to an item. The xy-cell mixin used this to output gutters, but you can use this to add responsive gutters to anything you like. This is especially powerful as you can specify where you want the gutters, like so:

~~~scss
.gallery-item {
  @include xy-gutters($gutter-position: left right bottom);
}
~~~

### Cells
Use the xy-cell() mixin to create a cell. There are a number of ways to define the size of a cell. xy-cell accepts a few different keywords as well as specific sizes: full (full width), auto (automatic width) and shrink (take up only the space it needs).

~~~scss
.main-content {
  // Use the full column count (100%)
  @include xy-cell();

  // Use a column count (33%);
  @include xy-cell(4);

  // Use a percentage (15%)
  @include xy-cell(15%);

  // Use a custom fraction (20%)
  @include xy-cell(1 of 5);
}
~~~

The cell size calculator can also be accessed as a function. This gives you the percentage value, without any of the grid cell CSS.

~~~scss
.main-content {
  width: xy-cell-size(1 of 7);
}
~~~

### Responsive Grids
Pair xy-cell with the breakpoint() mixin to make your grid responsive. Refer to the Sass documentation below to learn how each mixin works and the available arguments.

~~~scss
.main-content {
  @include xy-cell();

  @include breakpoint(medium) {
    @include xy-cell(8);
  }
}
~~~

### Custom Block Grid
Use the xy-grid-layout() mixin to create your own block grid. By default the mixin takes 2 parameters:

number of columns
child selector
Refer to the Sass documentation below for the full list of arguments.

Here's an example:

~~~scss
.gallery {
  @include xy-grid;
  @include xy-grid-layout(3, '.gallery-item');
}
~~~

That outputs this CSS:

~~~scss
.gallery > .gallery-item {
  width: calc(33.33333% - 1.25rem);
  margin-right: 0.625rem;
  margin-left: 0.625rem;
}

`)(() => {
            return null
        }))
}

function addStoriesFoundationFlexboxUtilities() {
    storiesOf('Foundation/Flexbox Utilities', module)
        .add('Intro', withInfo(`
        Flexbox makes horizontal and vertical alignment painless, through the CSS properties align-items, align-self, and justify-content. Foundation includes a handful of classes for these properties, which work with any flexbox-enabled component.

To understand how these classes work, you need to understand the parent-child relationship created with flexbox. An element with display: flex is a flex parent, and can horizontally or vertically align its children. All immediate children of the flex parent are flex children. A flex child can vertically align itself.

In the below examples we are using XY Grid classes instead of Legacy Flex Grid's row and column. These examples will work for row and column but then again the Legacy Flex Grid will be deprecated from Foundation 7 so we recommend to use XY Grid.

Here's a basic example: when using the grid, a grid-x or grid-y is a flex parent, and a cell is a flex child. Use grid-margin-x or grid-padding-x for adding gutters

`)(() => (
            <div className="grid-x grid-padding-x">
                <div className="cell small-4">Cell 1</div>
                <div className="cell small-4">Cell 2</div>
                <div className="cell small-4">Cell 3</div>
            </div>
        )))
        .add('Horizontal Alignment', withInfo(`
Horizontal alignment classes are applied to flex parents. Left alignment is the default, but you can use one of these classes to change this:

- .align-right
- .align-center
- .align-justify
- .align-spaced

`)(() => (
            <div>
                <div className="grid-x grid-padding-x">
                    <div className="cell small-4">Aligned to</div>
                    <div className="cell small-4">the left</div>
                </div>
                <div className="grid-x grid-padding-x align-right">
                    <div className="cell small-4">Aligned to</div>
                    <div className="cell small-4">the right</div>
                </div>
                <div className="grid-x grid-padding-x align-center">
                    <div className="cell small-4">Aligned to</div>
                    <div className="cell small-4">the center</div>
                </div>
                <div className="grid-x grid-padding-x align-justify">
                    <div className="cell small-4">Aligned to</div>
                    <div className="cell small-4">the edges</div>
                </div>
                <div className="grid-x grid-padding-x align-spaced">
                    <div className="cell small-4">Aligned to</div>
                    <div className="cell small-4">the space around</div>
                </div>

                <blockquote>
                    <p>You might be wondering what the difference between .align-justify and .align-spaced is. A justified grid (justify-content: space-between) evenly distributes the space between each column. The first and last columns pin to the edge of the grid.

                        A spaced grid (justify-content: space-around) evenly distributes the space around each column. This means there will always be space to the left of the first column, and to the right of the last column.

                        The horizontal alignment classes are shorthands for the justify-content CSS property. Learn more about justify-content.</p>
                </blockquote>
            </div>
        )))

        .add('Vertical Alignment', withInfo(`
Vertical alignment can be applied to a flex parent—which will align all the children automatically—or to a flex child, which will align only that element.

Stretch alignment is the default. To set parent alignment, use these classes:

- .align-top
- .align-middle
- .align-bottom
- .align-stretch

>> Note that with vertical alignment, we use the term "middle" for the midpoint, while with horizontal alignment, we use the term "center". As we can't have two CSS classes with the same name, thus we are using different terms.

`)(() => (
            <div>
                <h2>Top</h2>
                <div className="grid-x grid-padding-x align-top">
                    <div className="cell small-4">I'm at the top (default)</div>
                    <div className="cell small-4">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatum, tempora. Impedit eius officia possimus laudantium? Molestiae eaque, sapiente atque doloremque placeat! In sint, fugiat saepe sunt dolore tempore amet cupiditate.</div>
                </div>

                <h2>Middle</h2>
                <div className="grid-x grid-padding-x align-middle">
                    <div className="cell small-4">I'm in the middle</div>
                    <div className="cell small-4">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatum, tempora. Impedit eius officia possimus laudantium? Molestiae eaque, sapiente atque doloremque placeat! In sint, fugiat saepe sunt dolore tempore amet cupiditate.</div>
                </div>


                <h2>Middle</h2>
                <div className="grid-x grid-padding-x align-bottom">
                    <div className="cell small-4">I'm at the bottom</div>
                    <div className="cell small-4">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatum, tempora. Impedit eius officia possimus laudantium? Molestiae eaque, sapiente atque doloremque placeat! In sint, fugiat saepe sunt dolore tempore amet cupiditate.</div>
                </div>

                <h2>Middle</h2>
                <div className="grid-x grid-padding-x align-stretch">
                    <div className="cell small-4">These cells have the same height</div>
                    <div className="cell small-4">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatum, tempora. Impedit eius officia possimus laudantium? Molestiae eaque, sapiente atque doloremque placeat! In sint, fugiat saepe sunt dolore tempore amet cupiditate.</div>
                </div>

                <hr/>
                <blockquote>
                    To align an individual child, use the below classes. They use the same alignment terms as the parent-level classes, but the classes start with .align-self- instead of .align-.
                    <ul>
                        <li>
                            <pre><code>.align-self-top</code></pre>
                        </li>
                        <li>
                            <pre><code>.align-self-middle</code></pre>
                        </li>
                        <li>
                            <pre><code>.align-self-bottom</code></pre>
                        </li>
                        <li>
                            <pre><code>.align-self-stretch</code></pre>
                        </li>
                    </ul>
                </blockquote>
                <div className="grid-x grid-padding-x">
                    <div className="cell small-3 align-self-bottom">
                        <div className="demo">Align bottom</div>
                    </div>
                    <div className="cell small-3 align-self-middle">
                        <div className="demo">Align middle</div>
                    </div>
                    <div className="cell small-3 align-self-stretch">
                        <div className="demo">Align stretch</div>
                    </div>
                    <div className="cell small-3 align-self-top">
                        <div className="demo">Align top. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Non harum laborum cum voluptate vel, eius adipisci similique dignissimos nobis at excepturi incidunt fugit molestiae quaerat, consequuntur porro temporibus. Nisi, ex?</div>
                    </div>
                </div>


                <h2>Central alignment </h2>
                <p>Central alignment can be applied to a flex parent, which will centrally align all children horizontally and vertically automatically. To set this to your layout, simply use the class: .align-center-middle.</p>

                <p>We are using .text-center class just for demo purposes here.</p>

                <div className="grid-x grid-padding-x align-center-middle text-center" style={{ height: '200px' }}>
                    <div className="cell small-4">I am in the center-middle</div>
                    <div className="cell small-4">I am also centrally located</div>
                </div>
            </div>
        )))
        .add('Vanilla Flexbox Helper Classes', withInfo(`
Foundation also includes some helper classes for quickly applying flex container & direction attributes to elements.

To make something a flex container, simply apply

- .flex-container

And to change its flex direction from row to column you can use the helper classes:

- \`.flex-dir-row (default)\`
- \`.flex-dir-row-reverse\`
- \`.flex-dir-column\`
- \`.flex-dir-column-reverse\`
For children, there are 3 quick helper classes to apply the flex property. These control how the containers take up space relative to their siblings:

- \`.flex-child-auto\` (auto size flex child)
- \`.flex-child-grow\` (flex child that will grow to take up all possible space)
- \`.flex-child-shrink\` (flex child that will shrink to minimum possible space)        
        
        `)(() => (
            <div className="grid-x grid-padding-x">
                <div className="cell small-4 flex-container flex-dir-column">
                    <div className="callout primary flex-child-auto">Auto</div>
                    <div className="callout primary flex-child-auto">Auto</div>
                    <div className="callout primary flex-child-shrink">Shrink</div>
                </div>
                <div className="cell small-4">
                </div>
                <div className="cell small-4 align-self-top">Align top. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Non harum laborum cum voluptate vel, eius adipisci similique dignissimos nobis at excepturi incidunt fugit molestiae quaerat, consequuntur porro temporibus. Nisi, ex?Align top. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Non harum laborum cum voluptate vel, eius adipisci similique dignissimos nobis at excepturi incidunt fugit molestiae quaerat, consequuntur porro temporibus. Nisi, ex?Align top. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Non harum laborum cum voluptate vel, eius adipisci similique dignissimos nobis at excepturi incidunt fugit molestiae quaerat, consequuntur porro temporibus. Nisi, ex?</div>
            </div>
        )))
        .add('Source Ordering', withInfo(`
Flexbox supports source ordering, making it easy to rearrange columns on different screen sizes without weird relative positioning tricks.

The CSS property is easy enough to remember.

Copy
.element {
  order: 1;
}
Columns within a row will be sorted by their order property. Lower numbers are placed first. If multiple columns have the same number, they're sorted in the order they appear in the HTML.

We have a set of classes that make it easy to setup source ordering in your HTML. They also come in responsive flavors, allowing you to reorder a grid on different screen sizes.        
        `)(() => (
            <div className="grid-x grid-padding-x">
                <div className="cell small-6 small-order-2 medium-order-1">
                    This column will come second on small, and first on medium and larger.
                </div>
                <div className="cell small-6 small-order-1 medium-order-2">
                    This column will come first on small, and second on medium and larger.
                </div>
            </div>
        )))
        .add('SASS reference', withInfo('')(() => (
            <div style={{ padding: '20px' }}>
                <section>
                    <h2 id="sass-reference" className="docs-heading" data-magellan-target="sass-reference">Sass Reference<a className="docs-heading-icon" href="#sass-reference"></a></h2>
                    <section>
                        <h3 id="sass-variables" className="docs-heading">Variables<a className="docs-heading-icon" href="#sass-variables"></a></h3>
                        <p>The default styles of this component can be customized using these Sass variables in your project's <a href="sass.html#the-settings-file">settings file</a>.</p>
                        <table className="docs-variable-table">
                            <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Default Value</th>
                                <th>Description</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td className="name"><code>$flex-source-ordering-count</code></td>
                                <td>Number</td>
                                <td className="number"><code>6</code></td>
                                <td><p>Default value for the count of source ordering`</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$flexbox-responsive-breakpoints</code></td>
                                <td>Boolean</td>
                                <td className="boolean"><code>true</code></td>
                                <td><p>Quickly disable/enable Responsive breakpoints for Vanilla Flex Helpers.</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$xy-grid</code></td>
                                <td>Boolean</td>
                                <td className="boolean"><code>true</code></td>
                                <td><p>Enables the XY grid.</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$grid-container</code></td>
                                <td>Number</td>
                                <td className="number"><code>$global-width</code></td>
                                <td><p>The maximum width of a grid container.</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$grid-columns</code></td>
                                <td>Number</td>
                                <td className="number"><code>12</code></td>
                                <td><p>The number of columns used in the grid.</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$grid-margin-gutters</code></td>
                                <td>Map or Length</td>
                                <td className="map | length"><code>
                                    small: 20px<br/>
                                    medium: 30px
                                </code></td>
                                <td><p>The amount of margin between cells at different screen sizes when using the margin grid. To use just one size, set the variable to a number instead of a map.</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$grid-padding-gutters</code></td>
                                <td>Map or Length</td>
                                <td className="map | length"><code>$grid-margin-gutters</code></td>
                                <td><p>The amount of padding in cells at different screen sizes when using the padding grid. To use just one size, set the variable to a number instead of a map.</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$grid-container-padding</code></td>
                                <td>Map or Length</td>
                                <td className="map | length"><code>$grid-padding-gutters</code></td>
                                <td><p>The amount of padding to use when padding the grid-container.</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$grid-container-max</code></td>
                                <td>Number</td>
                                <td className="number"><code>$global-width</code></td>
                                <td><p>The maximum width to apply to a grid container</p>
                                </td>
                            </tr>
                            <tr>
                                <td className="name"><code>$xy-block-grid-max</code></td>
                                <td>Number</td>
                                <td className="number"><code>8</code></td>
                                <td><p>The maximum number of cells in an XY block grid.</p>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </section>
                    <hr/>
                    <section>
                        <h3 id="sass-mixins" className="docs-heading">Mixins<a className="docs-heading-icon" href="#sass-mixins"></a></h3>
                        <p>We use these mixins to build the final CSS output of this component. You can use the mixins yourself to build your own class structure out of our components.</p>
                        <section>
                            <h4 id="flex" className="docs-heading">flex<a className="docs-heading-icon" href="#flex"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> flex;</code></pre>
                            </div>
                            <p>Enables flexbox by adding <code>display: flex</code> to the element.</p>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="flex-align" className="docs-heading">flex-align<a className="docs-heading-icon" href="#flex-align"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> flex-align(<span className="hljs-variable">$x</span>, <span className="hljs-variable">$y</span>);</code></pre>
                            </div>
                            <p>Horizontally or vertically aligns the items within a flex container.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$x</code></td>
                                    <td>Keyword</td>
                                    <td><code>null</code></td>
                                    <td><p>Horizontal alignment to use. Can be <code>left</code>, <code>right</code>, <code>center</code>, <code>justify</code>, or <code>spaced</code>. Or, set it to <code>null</code> (the default) to not set horizontal alignment.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$y</code></td>
                                    <td>Keyword</td>
                                    <td><code>null</code></td>
                                    <td><p>Vertical alignment to use. Can be <code>top</code>, <code>bottom</code>, <code>middle</code>, or <code>stretch</code>. Or, set it to <code>null</code> (the default) to not set vertical alignment.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="flex-align-self" className="docs-heading">flex-align-self<a className="docs-heading-icon" href="#flex-align-self"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> flex-align-self(<span className="hljs-variable">$y</span>);</code></pre>
                            </div>
                            <p>Vertically align a single column within a flex row. Apply this mixin to a flex column.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$y</code></td>
                                    <td>Keyword</td>
                                    <td><code>null</code></td>
                                    <td><p>Vertical alignment to use. Can be <code>top</code>, <code>bottom</code>, <code>middle</code>, or <code>stretch</code>. Or, set it to <code>null</code> (the default) to not set vertical alignment.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="flex-order" className="docs-heading">flex-order<a className="docs-heading-icon" href="#flex-order"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> flex-order(<span className="hljs-variable">$order</span>);</code></pre>
                            </div>
                            <p>Changes the source order of a flex child. Children with lower numbers appear first in the layout.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$order</code></td>
                                    <td>Number</td>
                                    <td><code>0</code></td>
                                    <td><p>Order number to apply.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="flex-direction" className="docs-heading">flex-direction<a className="docs-heading-icon" href="#flex-direction"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> flex-direction(<span className="hljs-variable">$direction</span>);</code></pre>
                            </div>
                            <p>Change flex-direction</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$direction</code></td>
                                    <td>Keyword</td>
                                    <td><code>row</code></td>
                                    <td><p>Flex direction to use. Can be</p>
                                        <ul>
                                            <li>row (default): same as text direction</li>
                                            <li>row-reverse: opposite to text direction</li>
                                            <li>column: same as row but top to bottom</li>
                                            <li>column-reverse: same as row-reverse top to bottom</li>
                                        </ul>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-grid-frame" className="docs-heading">xy-grid-frame<a className="docs-heading-icon" href="#xy-grid-frame"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-grid-frame(<span className="hljs-variable">$vertical</span>, <span className="hljs-variable">$nested</span>, <span className="hljs-variable">$gutters</span>, <span className="hljs-variable">$breakpoint</span>, <span className="hljs-variable">$include-base</span>);</code></pre>
                            </div>
                            <p>Modifies a grid to give it "frame" behavior (no overflow, no wrap, stretch behavior)</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$vertical</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Is grid vertical or horizontal. Should match grid.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$nested</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Is grid nested or not. If nested is true this sets the frame to 100% height, otherwise will be 100vh.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutters</code></td>
                                    <td>Number or Map</td>
                                    <td><code>null</code></td>
                                    <td><p>Map or single value for gutters.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$breakpoint</code></td>
                                    <td>String</td>
                                    <td><code>null</code></td>
                                    <td><p>The name of the breakpoint size in your gutters map to get the size from.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$include-base</code></td>
                                    <td>Boolean</td>
                                    <td><code>true</code></td>
                                    <td><p>Include the base styles that don't vary per breakpoint.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-cell-block" className="docs-heading">xy-cell-block<a className="docs-heading-icon" href="#xy-cell-block"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-cell-block(<span className="hljs-variable">$vertical</span>);</code></pre>
                            </div>
                            <p>Modifies a cell to give it "block" behavior (overflow auto, inertial scrolling)</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$vertical</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Is grid vertical or horizontal. Should match grid.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-cell-block-container" className="docs-heading">xy-cell-block-container<a className="docs-heading-icon" href="#xy-cell-block-container"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-cell-block-container;</code></pre>
                            </div>
                            <p>Container for inside a grid frame containing multiple blocks. Typically used
                                as a modifier for a <code>.cell</code> to allow the cell to pass along flex sizing
                                constraints / from parents to children.</p>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-cell-base" className="docs-heading">xy-cell-base<a className="docs-heading-icon" href="#xy-cell-base"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-cell-base(<span className="hljs-variable">$size</span>);</code></pre>
                            </div>
                            <p>Sets base flex properties for cells.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$size</code></td>
                                    <td>Keyword</td>
                                    <td><code>full</code></td>
                                    <td><p>The size of your cell. Accepts <code>full</code>, <code>auto</code> or <code>shrink</code>.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-cell-reset" className="docs-heading">xy-cell-reset<a className="docs-heading-icon" href="#xy-cell-reset"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-cell-reset(<span className="hljs-variable">$vertical</span>);</code></pre>
                            </div>
                            <p>Resets a cells width (or height if vertical is true) as well as strips its gutters.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$vertical</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Set to true to output vertical (height) styles rather than widths.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-cell" className="docs-heading">xy-cell<a className="docs-heading-icon" href="#xy-cell"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-cell(<span className="hljs-variable">$size</span>, <span className="hljs-variable">$gutter-output</span>, <span className="hljs-variable">$gutters</span>, <span className="hljs-variable">$gutter-type</span>, <span className="hljs-variable">$gutter-position</span>, <span className="hljs-variable">$breakpoint</span>, <span className="hljs-variable">$vertical</span>);</code></pre>
                            </div>
                            <p>Creates a cell for your grid.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$size</code></td>
                                    <td>Keyword or Number</td>
                                    <td><code>full</code></td>
                                    <td><p>The size of your cell. Can be <code>full</code> (default) for 100% width, <code>auto</code> to use up available space and <code>shrink</code> to use up only required space.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-output</code></td>
                                    <td>Boolean</td>
                                    <td><code>true</code></td>
                                    <td><p>Whether or not to output gutters</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutters</code></td>
                                    <td>Number or Map</td>
                                    <td><code>$grid-margin-gutters</code></td>
                                    <td><p>Map or single value for gutters.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-type</code></td>
                                    <td>Keyword</td>
                                    <td><code>margin</code></td>
                                    <td><p>Map or single value for gutters.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-position</code></td>
                                    <td>List</td>
                                    <td><code>right left</code></td>
                                    <td><p>The position to apply gutters to. Accepts <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> in any combination.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$breakpoint</code></td>
                                    <td>String</td>
                                    <td><code>null</code></td>
                                    <td><p>The name of the breakpoint size in your gutters map to get the size from. If using with the <code>breakpoint()</code> mixin this will be set automatically unless manually entered.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$vertical</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Set to true to output vertical (height) styles rather than widths.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-cell-static" className="docs-heading">xy-cell-static<a className="docs-heading-icon" href="#xy-cell-static"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-cell-static(<span className="hljs-variable">$size</span>, <span className="hljs-variable">$gutter-output</span>, <span className="hljs-variable">$gutters</span>, <span className="hljs-variable">$gutter-type</span>, <span className="hljs-variable">$breakpoint</span>, <span className="hljs-variable">$vertical</span>);</code></pre>
                            </div>
                            <p>Creates a single breakpoint sized grid. Used to generate our grid classes.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$size</code></td>
                                    <td>Keyword or Number</td>
                                    <td><code>full</code></td>
                                    <td><p>The size of your cell. Can be <code>full</code> (default) for 100% width, <code>auto</code> to use up available space and <code>shrink</code> to use up only required space.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-output</code></td>
                                    <td>Boolean</td>
                                    <td><code>true</code></td>
                                    <td><p>Whether or not to output gutters</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutters</code></td>
                                    <td>Number or Map</td>
                                    <td><code>$grid-margin-gutters</code></td>
                                    <td><p>Map or single value for gutters.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-type</code></td>
                                    <td>Keyword</td>
                                    <td><code>margin</code></td>
                                    <td><p>Map or single value for gutters.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$breakpoint</code></td>
                                    <td>String</td>
                                    <td><code>null</code></td>
                                    <td><p>The name of the breakpoint size in your gutters map to get the size from. If using with the <code>breakpoint()</code> mixin this will be set automatically unless manually entered.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$vertical</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Set to true to output vertical (height) styles rather than widths.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-grid-collapse" className="docs-heading">xy-grid-collapse<a className="docs-heading-icon" href="#xy-grid-collapse"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-grid-collapse(<span className="hljs-variable">$selector</span>, <span className="hljs-variable">$gutter-type</span>, <span className="hljs-variable">$gutter-position</span>, <span className="hljs-variable">$min-breakpoint</span>);</code></pre>
                            </div>
                            <p>Collapses the grid a cells within it.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$selector</code></td>
                                    <td>String</td>
                                    <td><code>.cell</code></td>
                                    <td><p>The child element to remove the gutter from.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-type</code></td>
                                    <td>Keyword</td>
                                    <td><code>margin</code></td>
                                    <td><p>The type of gutter to remove.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-position</code></td>
                                    <td>List</td>
                                    <td><code>right left</code></td>
                                    <td><p>The positions to remove gutters from. Accepts <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> in any combination.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$min-breakpoint</code></td>
                                    <td>Keyword</td>
                                    <td><code>$-zf-zero-breakpoint</code></td>
                                    <td><p>Minimum breakpoint in <code>$breakpoint-classes</code> for which to collapse the gutter.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-grid-container" className="docs-heading">xy-grid-container<a className="docs-heading-icon" href="#xy-grid-container"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-grid-container(<span className="hljs-variable">$width</span>, <span className="hljs-variable">$padding</span>);</code></pre>
                            </div>
                            <p>Creates a max width container, designed to house your grid content.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$width</code></td>
                                    <td>Number</td>
                                    <td><code>$grid-container</code></td>
                                    <td><p>a width to limit the container to.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$padding</code></td>
                                    <td>Number</td>
                                    <td><code>$grid-container-padding</code></td>
                                    <td><p>paddings of the container.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-grid" className="docs-heading">xy-grid<a className="docs-heading-icon" href="#xy-grid"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-grid(<span className="hljs-variable">$direction</span>, <span className="hljs-variable">$wrap</span>);</code></pre>
                            </div>
                            <p>Creates a container for your flex cells.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$direction</code></td>
                                    <td>Keyword</td>
                                    <td><code>horizontal</code></td>
                                    <td><p>Either horizontal or vertical direction of cells within.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$wrap</code></td>
                                    <td>Boolean</td>
                                    <td><code>true</code></td>
                                    <td><p>If the cells within should wrap or not.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-gutters" className="docs-heading">xy-gutters<a className="docs-heading-icon" href="#xy-gutters"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-gutters(<span className="hljs-variable">$gutters</span>, <span className="hljs-variable">$gutter-type</span>, <span className="hljs-variable">$gutter-position</span>, <span className="hljs-variable">$negative</span>);</code></pre>
                            </div>
                            <p>Create gutters for a cell/container.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$gutters</code></td>
                                    <td>Number or Map</td>
                                    <td><code>$grid-margin-gutters</code></td>
                                    <td><p>Map or single value for gutters.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-type</code></td>
                                    <td>Keyword</td>
                                    <td><code>margin</code></td>
                                    <td><p>Type of gutter to output. Accepts either margin or padding.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-position</code></td>
                                    <td>List</td>
                                    <td><code>right left</code></td>
                                    <td><p>The position to apply gutters to. Accepts <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> in any combination.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$negative</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Whether to apply the gutter as a negative value. Commonly used for nested grids.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-grid-layout" className="docs-heading">xy-grid-layout<a className="docs-heading-icon" href="#xy-grid-layout"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-grid-layout(<span className="hljs-variable">$n</span>, <span className="hljs-variable">$selector</span>, <span className="hljs-variable">$gutter-output</span>, <span className="hljs-variable">$gutters</span>, <span className="hljs-variable">$gutter-type</span>, <span className="hljs-variable">$gutter-position</span>, <span className="hljs-variable">$vertical</span>);</code></pre>
                            </div>
                            <p>Sizes child elements so that <code>$n</code> number of items appear on each row.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$n</code></td>
                                    <td>Number</td>
                                    <td><code><span style={{color: '#999'}}>None</span></code></td>
                                    <td><p>Number of elements to display per row.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$selector</code></td>
                                    <td>String</td>
                                    <td><code>'.cell'</code></td>
                                    <td><p>Selector(s) to use for child elements.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-output</code></td>
                                    <td>Boolean</td>
                                    <td><code>true</code></td>
                                    <td><p>Whether or not to output gutters</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutters</code></td>
                                    <td>Number or Map</td>
                                    <td><code>$grid-margin-gutters</code></td>
                                    <td><p>Map or single value for gutters.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-type</code></td>
                                    <td>Keyword</td>
                                    <td><code>margin</code></td>
                                    <td><p>Type of gutter to output. Accepts <code>margin</code> or <code>padding</code>.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-position</code></td>
                                    <td>List</td>
                                    <td><code>right left</code></td>
                                    <td><p>The position to apply gutters to. Accepts <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> in any combination.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$vertical</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Set to true to output vertical (height) styles rather than widths.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                        <hr/>
                        <section>
                            <h4 id="xy-cell-offset" className="docs-heading">xy-cell-offset<a className="docs-heading-icon" href="#xy-cell-offset"></a></h4>
                            <div className="docs-code">
                                <pre><code>@<span className="hljs-keyword">include</span> xy-cell-offset(<span className="hljs-variable">$n</span>, <span className="hljs-variable">$gutters</span>, <span className="hljs-variable">$gutter-type</span>, <span className="hljs-variable">$breakpoint</span>, <span className="hljs-variable">$vertical</span>);</code></pre>
                            </div>
                            <p>Offsets a column to the right/bottom by <code>$n</code> columns.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$n</code></td>
                                    <td>Number or List</td>
                                    <td><code><span style={{color: '#999'}}>None</span></code></td>
                                    <td><p>Size to offset by. You can pass in any value accepted by the <code>zf-cell()</code> mixin, such as <code>6</code>, <code>50%</code>, or <code>1 of 2</code>.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutters</code></td>
                                    <td>Number or Map</td>
                                    <td><code>$grid-margin-gutters</code></td>
                                    <td><p>Map of gutters or single value to use for responsive gutters.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$gutter-type</code></td>
                                    <td>Keyword</td>
                                    <td><code>margin</code></td>
                                    <td><p>The type of gutter to use. Can be <code>margin</code> or <code>padding</code></p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$breakpoint</code></td>
                                    <td>Number or Array or Keyword</td>
                                    <td><code>$-zf-zero-breakpoint</code></td>
                                    <td><p>Single value, breakpoint name, or list of breakpoint names to use for <code>$gutters</code>. See <code>-zf-breakpoint-value()</code>.</p>
                                    </td>
                                </tr>
                                <tr>
                                    <td><code>$vertical</code></td>
                                    <td>Boolean</td>
                                    <td><code>false</code></td>
                                    <td><p>Sets the direction of the offset. If set to true will apply margin-top instead.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                    </section>
                    <hr/>f
                    <section>
                        <h3 id="sass-functions" className="docs-heading">Functions<a className="docs-heading-icon" href="#sass-functions"/></h3>
                        <section>
                            <h4 id="xy-cell-size" className="docs-heading">xy-cell-size<a className="docs-heading-icon" href="#xy-cell-size"/></h4>
                            <div className="docs-code">
                                <pre><code>xy-cell-size(<span className="hljs-variable">$size</span>)</code></pre>
                            </div>
                            <p>Calculate the percentage size of a cell.</p>
                            <table className="docs-variable-table">
                                <thead>
                                <tr>
                                    <th>Parameter</th>
                                    <th>Type</th>
                                    <th>Default Value</th>
                                    <th>Description</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td><code>$size</code></td>
                                    <td>Number or List</td>
                                    <td><code>$grid-columns</code></td>
                                    <td><p>Size to make the cell. You can pass a value in multiple formats, such as <code>6</code>, <code>50%</code>, <code>1 of 2</code> or <code>1/3</code>.</p>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                        </section>
                    </section>
                </section>
            </div>
        )))
}


